{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bubble sort\n",
    "Also known by its earlier name *Exchange sorting*, Bubble sort has its origins in the 1950s and was one of the first sorting algorithms to recieve considerable study. \n",
    "\n",
    "It was also somewhat controversial, with some such as Knuth's [The Art of Computer Programming](https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming#Completed) decrying it due to its general inefficiency. \"In short, the bubble sort seems to have nothing to recommend it, except a catchy name and the fact that it leads to some interesting theoretical problems.\" Knuth wrote. By curious contrast, Kernighan and Plauger's [Software Tools](https://www.goodreads.com/book/show/515603.Software_Tools), written in 1976, provided more complementary, having it as the first sorting algorithm to be studied. Another contemporary book on algorithms claimed \"this sorting algorithm is commonly used where the value of n is not too large and programming effort is to be kept to a minimum.\" A good study of it's history can be found in Owen Astrachan's [Bubble Sort: An Archaeological Algorithmic Analysis](https://users.cs.duke.edu/~ola/bubble/bubble.html).\n",
    "\n",
    "Bubble sort works by comparing 2 numbers. If the one on the right is smaller than the one on the left it swaps the two before moving on to the next position in the list. As the next number is not guaranteed to be larger than both the preceeding numbers it takes a number of passes through the entire list before it can be sorted in most cases.\n",
    "\n",
    "![bubbleSortIllustration]()\n",
    "\n",
    "[Bubble sort Illustration source](https://medium.com/karuna-sehgal/an-introduction-to-bubble-sort-d85273acfcd8)\n",
    "\n",
    "As this animated version shows, this may take a while to run even on small data inputs.\n",
    "\n",
    "![bubbleSortGif](img\\Bubble-sort-gif.gif)\n",
    "\n",
    "[Wikipedia](https://upload.wikimedia.org/wikipedia/commons/0/06/Bubble-sort.gif)\n",
    "\n",
    "So what are the potential use cases for this algorithm? Well consider when most computers used [tape drives](https://en.wikipedia.org/wiki/Magnetic_tape_data_storage) for storing information. There is little memory and the cost of moving the tape back and forth for random access is expensive, if not impossible. From this point of view the small memory footprint of Bubble sort becomes useful. \n",
    "See this stackoverflow [answer](https://stackoverflow.com/questions/276113/what-is-a-bubble-sort-good-for) for more detail.\n",
    "\n",
    "Bubble sort's worst and average case time puts it in at: *O(n^2)* with *O(1)* for space compleaxity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[11, 12, 22, 25, 34, 64, 90]\n"
     ]
    }
   ],
   "source": [
    "# bubbleSort.py\n",
    "\n",
    "def bubbleSort(array):\n",
    "    n = len(array)\n",
    "    \n",
    "    # Traverse all the array elements \n",
    "    for i in range(n-1, 0, -1):\n",
    "\n",
    "        \n",
    "        for j in range(i):\n",
    "            if array[j] > array[j + 1]:\n",
    "                array[j], array[j + 1] = array[j + 1], array[j]\n",
    "         \n",
    "        \n",
    "        \n",
    "\"\"\" Test case \"\"\"\n",
    "\"\"\" Note: the argument arr is modified in place, there is no list returned as in some sorting algorithms\"\"\"\n",
    "\n",
    "arr = [64, 34, 25, 12, 22, 11, 90] \n",
    "bubbleSort(arr)\n",
    "print(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
